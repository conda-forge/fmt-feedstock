From 2145a7bdccdda0b39d96a99f943123317145b874 Mon Sep 17 00:00:00 2001
From: "David P. Sicilia" <dpacbach@users.noreply.github.com>
Date: Thu, 14 Nov 2019 10:08:24 -0500
Subject: [PATCH 125/186] Move has_formatter into the public fmt namespace.
 (#1407)

* Move has_formatter into the public fmt namespace.

This will allow users to do SFINAE-friendly checks for
the formattability of a type.

Fixes #1369
---
 include/fmt/core.h  | 4 ++--
 test/core-test.cc   | 8 ++++----
 test/format-test.cc | 4 ++--
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/include/fmt/core.h b/include/fmt/core.h
index 091da657..7e6de98f 100644
--- a/include/fmt/core.h
+++ b/include/fmt/core.h
@@ -542,14 +542,14 @@ struct FMT_DEPRECATED convert_to_int
     : bool_constant<!std::is_arithmetic<T>::value &&
                     std::is_convertible<T, int>::value> {};
 
-namespace internal {
-
 // Specifies if T has an enabled formatter specialization. A type can be
 // formattable even if it doesn't have a formatter e.g. via a conversion.
 template <typename T, typename Context>
 using has_formatter =
     std::is_constructible<typename Context::template formatter_type<T>>;
 
+namespace internal {
+
 /** A contiguous memory buffer with an optional growing ability. */
 template <typename T> class buffer {
  private:
diff --git a/test/core-test.cc b/test/core-test.cc
index acfd2cd0..c3706002 100644
--- a/test/core-test.cc
+++ b/test/core-test.cc
@@ -453,11 +453,11 @@ template <> struct formatter<enabled_formatter> {
 FMT_END_NAMESPACE
 
 TEST(CoreTest, HasFormatter) {
-  using fmt::internal::has_formatter;
+  using fmt::has_formatter;
   using context = fmt::format_context;
-  EXPECT_TRUE((has_formatter<enabled_formatter, context>::value));
-  EXPECT_FALSE((has_formatter<disabled_formatter, context>::value));
-  EXPECT_FALSE((has_formatter<disabled_formatter_convertible, context>::value));
+  static_assert(has_formatter<enabled_formatter, context>::value, "");
+  static_assert(!has_formatter<disabled_formatter, context>::value, "");
+  static_assert(!has_formatter<disabled_formatter_convertible, context>::value, "");
 }
 
 struct convertible_to_int {
diff --git a/test/format-test.cc b/test/format-test.cc
index 61b893c4..0dce6bad 100644
--- a/test/format-test.cc
+++ b/test/format-test.cc
@@ -1974,8 +1974,8 @@ enum TestEnum { A };
 TEST(FormatTest, Enum) { EXPECT_EQ("0", fmt::format("{}", A)); }
 
 TEST(FormatTest, FormatterNotSpecialized) {
-  EXPECT_FALSE((fmt::internal::has_formatter<fmt::formatter<TestEnum>,
-                                             fmt::format_context>::value));
+  static_assert(!fmt::has_formatter<fmt::formatter<TestEnum>,
+                                    fmt::format_context>::value, "");
 }
 
 #if FMT_HAS_FEATURE(cxx_strong_enums)
-- 
2.21.0 (Apple Git-122.2)

